<?php
// $Id: media_youtube.install,v 1.1.2.8 2010/04/22 18:33:51 aaron Exp $

/**
 * @file
 * This is Media: YouTube's installation, configuration, and removal file.
 */

/**
 * Implementation of hook_install().
 */
function media_youtube_install() {
  // Ensure we have the required variable namespace.
  drupal_load('module', 'media_youtube');

  _media_youtube_convert_old_variables();

  $success = drupal_install_schema('media_youtube');

  if ($success) {
    drupal_set_message(st('The Media: YouTube module installed tables successfully.'));
  }
  else {
    drupal_set_message(st('The installation of the Media: YouTube module failed.'), 'error');
  }
}

/**
 * Implementation of hook_uninstall().
 */
function media_youtube_uninstall() {
  foreach (media_youtube_variable_default() as $variable => $value) {
    media_youtube_variable_del($variable);
  }
  return array(array('success' => TRUE, 'query' => "Deleted all variables in the Media: YouTube namespace."));
}

/**
 * Implementation of hook_disable().
 */
function media_youtube_disable() {
  cache_clear_all('*', 'cache_media_youtube_status', TRUE);
}

/**
 * Oops; we did this here rather than on install.
 * Redo in 6002 to catch anyone missed...
 */
function media_youtube_update_6001() {
  return array();
}

/**
 * Catch anyone who missed this on a fresh installation.
 */
function media_youtube_update_6002() {
  return _media_youtube_convert_old_variables();
}

/**
 * Build a table to cache video status.
 */
function media_youtube_update_6003() {
  $schema = array();

  $schema['cache_media_youtube_status'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_media_youtube_status']['description'] = 'Cache table used to store video status for Media: YouTube.';

  $ret = array();
  db_create_table($ret, 'cache_media_youtube_status', $schema['cache_media_youtube_status']);

  // Catch our new theme function for unavailable videos.
  drupal_rebuild_theme_registry();
  return $ret;
}

/**
 * Convert pre-existing variables to the Media: YouTube variable namespace.
 */
function _media_youtube_convert_old_variables() {
  $ret = array();

  $variables = array(
    'emvideo_youtube_api_key' => 'api_key',
    'emvideo_youtube_api_secret' => 'api_secret',
    'emvideo_youtube_show_related_videos' => 'show_related_videos',
    'emvideo_youtube_show_colors' => 'show_colors',
    'emvideo_youtube_show_border' => 'show_border',
    'emvideo_youtube_colors_color1' => 'colors_color1',
    'emvideo_youtube_colors_color2' => 'colors_color2',
    'emvideo_youtube_full_screen' => 'full_screen',
    'emvideo_youtube_high_quality' => 'high_quality',
    'emvideo_youtube_display_info' => 'display_info',
    'emvideo_youtube_enablejsapi' => 'enablejsapi',
    'emvideo_youtube_use_jw_flv' => 'use_jw_flv',
  );

  foreach ($variables as $old_variable => $new_variable) {
    $new_value = media_youtube_variable_get($new_variable);
    $old_value = variable_get($old_variable, $new_value);

    // Set the variable to the value of the old version of emfield,
    // assuming it hasn't already been overridden, and the old version is not
    // the current default.
    if (($new_value == media_youtube_variable_default($new_variable)) && ($new_value != $old_value)) {
      media_youtube_variable_set($new_variable, $old_value);
    }
    variable_del($old_variable);
  }
  $ret[] = array('success' => TRUE, 'query' => "Converted pre-existing variables to the Media: YouTube variable namespace.");

  // Add the new settings page to the menu.
  menu_rebuild();
  $ret[] = array('success' => TRUE, 'query' => "Rebuilt the menu for the new administrative settings page.");

  return $ret;
}

/**
 * Implementation of hook_schema().
 */
function media_youtube_schema() {
  $schema = array();

  $schema['cache_media_youtube_status'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_media_youtube_status']['description'] = 'Cache table used to store video status for Media: YouTube.';

  return $schema;
}

<?php
/**
 * @file
 * Field Tool Execute
 *
 * A sample implementation of creating/updating entities modified by Field Tool.
 *
 * Copyright 2009 Matthew Davidson (http://drupal.org/user/52996).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

module_load_include('inc', 'fieldtool_execute');

/**
 * List entity types that we support
 */
function fieldtool_execute_entity_types() {
  static $entity_types;

  if (!isset($entity_types)) {
    $cache = cache_get('fieldtool_execute:entity-types');

    if (!empty($cache->data)) {
      $entity_types = $cache->data;
    }
    else {
      $entity_types = module_invoke_all('fieldtool_execute_entity_types');
      drupal_alter('fieldtool_execute_entity_types', $entity_types);
      cache_set('fieldtool_execute:entity-types', $entity_types);
    }
  }
  return $entity_types;
}


/**
 * Universal form submission function.
 *
 * @param $type
 *   Entity type.
 * @param $op
 *   Either 'create' or 'update'.
 * @param $entity
 *   The entity to be worked on.
 * @param $silent
 *   Stop messages being sent to page output. Desirable if batch processing many entities.
 *
 * @return
 *   An array containing error messages (count them to see if something's gone wrong), and all messages.
 */
function fieldtool_execute_submit($type, $op, $entity, $silent = TRUE) {
  $entity_types = fieldtool_execute_fieldtool_execute_entity_types();
  if ($entity_types[$type]['submit callback']) {
    $form_state = $entity_types[$type]['submit callback']($op, $entity);
  }
  else {
    fieldtool_execute_set_error('Submit callback missing', 'Submit callback not found for this entity type.');
  }
  
  $errors = fieldtool_execute_get_errors();
  $form_errors = form_get_errors();
  if (count($form_errors)) {
    $errors = array_merge($errors, $form_errors);
  }
  
  // Get messages, clearing them if in silent mode
  // TODO: Silent mode stuffs up Devel module's dsm().
  $messages = drupal_get_messages(NULL, $silent);
  
  // Reset errors in case we are submitting multiple forms in a single request - very likely;
  fieldtool_execute_set_error(NULL, NULL, TRUE);
  form_set_error(NULL, NULL, TRUE);
  
  // Add errors to messages
  foreach ($errors as $error) {
    $messages['error'][] = $error;
  }
  
  return array(
    'form_state' => $form_state,
    'messages' => $messages,
  );
}

/**
 * Implementation of hook_fieldtool_execute_entity_types().
 */
function fieldtool_execute_fieldtool_execute_entity_types() {
  return array(
    'node' => array(
      'label' => t('Node'),
      'submit callback' => 'fieldtool_execute_node_form',
    ),
/* TODO: User module support
    'user' => array(
      'label' => t('Drupal user'),
      'submit callback' => 'fieldtool_execute_user_form',
    ),
*/
  );
}


/**
 * Prepares a form for submission with drupal_execute().
 *
 * A modified verion of drupal_get_form().
 *
 * @param $form_id
 *   The unique string identifying the desired form. If a function
 *   with that name exists, it is called to build the form array.
 *   Modules that need to generate the same form (or very similar forms)
 *   using different $form_ids can implement hook_forms(), which maps
 *   different $form_id values to the proper form constructor function. Examples
 *   may be found in node_forms(), search_forms(), and user_forms().
 * @param ...
 *   Any additional arguments are passed on to the functions called by
 *   drupal_get_form(), including the unique form constructor function.
 *   For example, the node_edit form requires that a node object be passed
 *   in here when it is called.
 * @return
 *   The rendered form.
 */
function fieldtool_execute_get_form_state($form_id) {
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  
  $args = func_get_args();
  $cacheable = FALSE;

  // If the incoming $_POST contains a form_build_id, we'll check the
  // cache for a copy of the form in question. If it's there, we don't
  // have to rebuild the form to proceed. In addition, if there is stored
  // form_state data from a previous step, we'll retrieve it so it can
  // be passed on to the form processing code.
  if (isset($_POST['form_id']) && $_POST['form_id'] == $form_id && !empty($_POST['form_build_id'])) {
    $form = form_get_cache($_POST['form_build_id'], $form_state);
  }

  // If the previous bit of code didn't result in a populated $form
  // object, we're hitting the form for the first time and we need
  // to build it from scratch.
  if (!isset($form)) {
    $form_state['post'] = $_POST;
    // Use a copy of the function's arguments for manipulation
    $args_temp = $args;
    $args_temp[0] = &$form_state;
    array_unshift($args_temp, $form_id);

    $form = call_user_func_array('drupal_retrieve_form', $args_temp);
    $form_build_id = 'form-'. md5(uniqid(mt_rand(), true));
    $form['#build_id'] = $form_build_id;
    drupal_prepare_form($form_id, $form, $form_state);
    // Store a copy of the unprocessed form for caching and indicate that it
    // is cacheable if #cache will be set.
    $original_form = $form;
    $cacheable = TRUE;
    unset($form_state['post']);
  }
  $form['#post'] = $_POST;

  // Now that we know we have a form, we'll process it (validating,
  // submitting, and handling the results returned by its submission
  // handlers. Submit handlers accumulate data in the form_state by
  // altering the $form_state variable, which is passed into them by
  // reference.
  drupal_process_form($form_id, $form, $form_state);
  if ($cacheable && !empty($form['#cache'])) {
    // Caching is done past drupal_process_form so #process callbacks can
    // set #cache.
    form_set_cache($form_build_id, $original_form, $form_state);
  }

  // Most simple, single-step forms will be finished by this point --
  // drupal_process_form() usually redirects to another page (or to
  // a 'fresh' copy of the form) once processing is complete. If one
  // of the form's handlers has set $form_state['redirect'] to FALSE,
  // the form will simply be re-rendered with the values still in its
  // fields.
  //
  // If $form_state['storage'] or $form_state['rebuild'] has been set
  // and the form has been submitted, we know that we're in a complex
  // multi-part process of some sort and the form's workflow is NOT 
  // complete. We need to construct a fresh copy of the form, passing
  // in the latest $form_state in addition to any other variables passed
  // into drupal_get_form().

  if ((!empty($form_state['storage']) || !empty($form_state['rebuild'])) && !empty($form_state['submitted']) && !form_get_errors()) {
    $form = drupal_rebuild_form($form_id, $form_state, $args);
  }

  // We only need $form_state['values'].
  $form_state = array('values' => $form_state['values']);

  return $form_state;
}


/**
 * Return an appropriately-populated node form.
 *
 * Help from http://api.drupal.org/api/function/drupal_get_form/6#comment-218
 * 
 * @param $op
 *   Either 'create' or 'update'
 * @param $node
 *   A node object. In the case of 'add' operations, must at least contain $node->type
 *
 * @return
 *   An array of error messages (if any).
 */
function fieldtool_execute_node_form($op, $node = NULL) {
  module_load_include('inc', 'node', 'node.pages');
  $types = node_get_types();
  // If a node type has been specified, validate its existence.
  if (isset($types[$node->type])) {
    // Initialize settings:
    if (isset($node->uid)) {
      $user = user_load($node->uid);
    }
    else {
      global $user;
    }
    $node->uid = $user->uid;
    $node->name = isset($user->name) ? $user->name : '';
  }
  else {
    fieldtool_execute_set_error('Invalid node type', $message = 'You have not provided a valid node type.');
    return;
  }

  switch ($op) {
    case 'create':
      if (!node_access('create', $node->type)) {
        fieldtool_execute_set_error('Create '. $node->type .' permission', $message = 'You do not have permission to create '. $node->type .' nodes.');
        return;
      }
      drupal_set_title(t('Create @name', array('@name' => $types[$type]->name)));
      break;
    case 'update':
      if (!node_access('update', $node)) {
        fieldtool_execute_set_error('Update node '. $node->nid .' permission', $message = 'You do not have permission to edit node '. $node->nid .'.');
        return;
      }
      break;
  }
  
  node_object_prepare($node);

  $form_state = fieldtool_execute_get_form_state($node->type .'_node_form', $node);
  $form_state['values']['op'] = t('Save');
  fieldtool_execute_execute($node->type .'_node_form', $form_state, $node);
  
  return $form_state;
}


/**
 * Store errors from a create/update operation.
 *
 * Based on form_set_error().
 */
function fieldtool_execute_set_error($name = NULL, $message = '', $reset = FALSE) {
  static $form = array();
  if ($reset) {
    $form = array();
  }
  if (isset($name) && !isset($form[$name])) {
    $form[$name] = $message;
    if ($message) {
      drupal_set_message($message, 'error');
    }
  }
  return $form;
}

/**
 * Return an associative array of all errors.
 */
function fieldtool_execute_get_errors() {
  $form = fieldtool_execute_set_error();
  if (!empty($form)) {
    return $form;
  }
  else {
    return array();
  }
}


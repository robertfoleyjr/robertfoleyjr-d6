<?php
// $Id: postiteverywhere.module,v 1.1.2.12 2010/03/10 19:30:15 confiz Exp $

//Download the OAuth library from http://github.com/abraham/twitteroauth/raw/master/twitteroauth/OAuth.php and place it in the 'api' directory
require_once("api/OAuth.php");

//Constants
define(POSTITEVERYWHERE_ID_SPLITTER, '__SEP__');
define(POSTITEVERYWHERE_MISSED_USERINFO, -1);
define(POSTITEVERYWHERE_INCORRECT_USERINFO, -2);

/**
 * @defgroup connectapi APIs for Twitter, FriendFeed and LinkedIn
 * The classes used to connect with Twitter, FriendFeed and LinkedIn
 */

/**
 * The class contains functions those will be used to connect with LinkedIn
 */
class PostiteverywhereApiLinkedIn {
  public $sig_method;
  public $consumer;
  public $request_tok;
  public $callback;
  public $domain;
  /**
   * Consturctor
   * @param $key - The public key of the API
   * @param $secret - The private key of the application
   *
   * @author Qasim Zeeshan
   */
  function __construct($key, $secret) {
    $this->domain = "https://api.linkedin.com/uas/oauth";
    $this->sig_method = new OAuthSignatureMethod_HMAC_SHA1();
    $this->callback = 'http://' . $_SERVER['HTTP_HOST'] . '/postiteverywhere/linkedin/added';
    $this->consumer = new OAuthConsumer($key, $secret, NULL);
    $this->sig_method = new OAuthSignatureMethod_HMAC_SHA1();
    $this->request_tok = OAuthRequest::from_consumer_and_token($this->consumer, NULL, "POST", $this->domain . "/requestToken");
  }
  /**
   * Get Authorization Tokens those are used to create Authorization URLs
   *
   * @author Qasim Zeeshan
   */
  function getAuthorizationTokens() {
    //Set URL where we will read Authorization Tokens after Authorization
    $this->request_tok->set_parameter("oauth_callback", $this->callback);
    $this->request_tok->sign_request($this->sig_method, $this->consumer, NULL);
    //Settings for CURL options
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_POSTFIELDS, '');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array(
            $this->request_tok->to_header()
    ));
    curl_setopt($ch, CURLOPT_URL, $this->domain . "/requestToken");
    curl_setopt($ch, CURLOPT_POST, 1);
    $output = curl_exec($ch);
    curl_close($ch);
    parse_str($output, $oauth);

    return $oauth;
  }
  /**
   * Get access token of the user that will be used by the application for communication with Linkedin
   *
   * @param $token: oauth_token found in the callback URL
   * @param $tokensecret: the secret token that was found in $oauth from getAuthorizationTokens() function
   * @param $verifier: oauth_verifier found in the call back URL
   *
   * @author Qasim Zeeshan
   */
  function getAccessToken($token, $tokensecret, $verifier) {
    $req_token = new OAuthConsumer($token, $tokensecret, 1);
    $acc_req = OAuthRequest::from_consumer_and_token($this->consumer, $req_token, "POST", $this->domain . '/accessToken');
    $acc_req->set_parameter("oauth_verifier", $verifier);  # need the verifier too!
    $acc_req->sign_request($this->sig_method, $this->consumer, $req_token);

    $ch = curl_init();
    //Curl Options settings
    curl_setopt($ch, CURLOPT_POSTFIELDS, ''); //New Line
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array( $acc_req->to_header() ));
    curl_setopt($ch, CURLOPT_URL, $this->domain . "/accessToken");
    curl_setopt($ch, CURLOPT_POST, 1);
    $output = curl_exec($ch);
    curl_close($ch);
    parse_str($output, $oauth);
    return $oauth;

  }
  /**
   * Get user information of a linkedin user, The request type is GET
   * @param $token: Public token of user
   * @param $secret: Secret token of user
   *
   * @author Qasim Zeeshan
   */
  function getUserInfo($useropen, $usersecret) {
    $endpoint = "http://api.linkedin.com/v1/people/~:(id,first-name,last-name,headline,industry,educations)";
    $req_token = new OAuthConsumer($useropen, $usersecret, 1);
    $profile_req = OAuthRequest::from_consumer_and_token($this->consumer, $req_token, "GET", $endpoint, array());
    $profile_req->sign_request($this->sig_method, $this->consumer, $req_token);

    $ch = curl_init();

    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array(
          $profile_req->to_header()
    ));
    curl_setopt($ch, CURLOPT_URL, $endpoint);
    $output = curl_exec($ch);
    return $output;

  }
  /**
   * Post status messsage to LinkedIn, The method is PUT that is a custom message required by LinkedIn API
   *
   * @param $token: Public token of user
   * @param $secret: Secret token of user
   * @param $msg: Message that is to be send
   *
   * @author Qasim Zeeshan
   */
  function setStatus($token, $secret, $msg) {
    $host = "http://api.linkedin.com/v1/people/~/current-status";
    $method = 'PUT';
    $args = '<?xml version="1.0" encoding="UTF-8"?><current-status>' . $msg . '</current-status>';
    $arg_seq = array();
    $req_token = new OAuthConsumer( $token, $secret, 1 );
    $profile_req = OAuthRequest::from_consumer_and_token($this->consumer, $req_token, $method, $host, $arg_seq);
    $profile_req->sign_request($this->sig_method, $this->consumer, $req_token);

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array($profile_req->to_header('http://api.linkedin.com')));
    curl_setopt($ch, CURLOPT_URL, $host);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
    curl_setopt($ch, CURLOPT_POSTFIELDS, $args);

    $output = curl_exec($ch);
    
    curl_close($ch);
    //flush();
    return $output;
  }
}

/**
 * The class contains functions those will be used to connect with Twitter
 */
class PostiteverywhereApiTwitter {
  public $sig_method;
  public $consumer;
  public $request_tok;
  public $callback;
  public $domain;
  public $host;
  function __construct($key, $secret) {
    $this->domain = "http://twitter.com/oauth";
    $this->sig_method = new OAuthSignatureMethod_HMAC_SHA1();
    $this->callback = 'http://' . $_SERVER['HTTP_HOST'] . '/postiteverywhere/twitter/added';
    $this->consumer = new OAuthConsumer($key, $secret, NULL);
    $this->sig_method = new OAuthSignatureMethod_HMAC_SHA1();
    $this->request_tok = OAuthRequest::from_consumer_and_token($this->consumer, NULL, "POST", $this->domain . "/request_token");
    $this->host = 'https://api.twitter.com/1/';
  }
  /**
   * Get Authorization Tokens those are used to create Authorization URLs
   *
   * @author Qasim Zeeshan
   */
  function getAuthorizationTokens() {
    $this->request_tok->set_parameter("oauth_callback", $this->callback);
    $this->request_tok->sign_request($this->sig_method, $this->consumer, NULL);

    $ch = curl_init();
    // make sure we submit this as a post
    curl_setopt($ch, CURLOPT_POSTFIELDS, '');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array(
            $this->request_tok->to_header()
    ));
    curl_setopt($ch, CURLOPT_URL, $this->domain . "/request_token");
    curl_setopt($ch, CURLOPT_POST, 1);
    $output = curl_exec($ch);
    curl_close($ch);
    parse_str($output, $oauth);

    return $oauth;
  }
  /**
   * Get access token of the user that will be used by the application for communication
   *
   * @param $token: oauth_token found in the callback URL
   * @param $tokensecret: the secret token that was found in $oauth from getAuthorizationTokens() function
   * @param $verifier: oauth_verifier found in the call back URL
   *
   * @author Qasim Zeeshan
   */
  function getAccessToken($token, $tokensecret, $verifier) {
    $req_token = new OAuthConsumer($token, $tokensecret, 1);
    $acc_req = OAuthRequest::from_consumer_and_token($this->consumer, $req_token, "POST", $this->domain . '/access_token');
    $acc_req->set_parameter("oauth_verifier", $verifier);  # need the verifier too!
    $acc_req->sign_request($this->sig_method, $this->consumer, $req_token);

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_POSTFIELDS, ''); //New Line
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array(
            $acc_req->to_header()
    ));
    curl_setopt($ch, CURLOPT_URL, $this->domain . "/access_token");
    curl_setopt($ch, CURLOPT_POST, 1);
    $output = curl_exec($ch);
    curl_close($ch);
    parse_str($output, $oauth);
    return $oauth;
  }
  /**
   * Posts to Twitter
   *
   * @param $token: Public token of user
   * @param $secret: Secret token of user
   * @param $msg: Message that is to be send
   *
   * @author Qasim Zeeshan
   */
  function setStatus($token, $secret, $msg) {
    $host = "https://twitter.com/statuses/update.xml";  //XML request

    $method = 'POST';   //The method is POST
    $arg_seq = array('status' => $msg);   //Post parameters
    $req_token = new OAuthConsumer($token, $secret, 1);
    $profile_req = OAuthRequest::from_consumer_and_token($this->consumer, $req_token, $method, $host, $arg_seq);
    $profile_req->sign_request($this->sig_method, $this->consumer, $req_token);

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Expect:'));
    curl_setopt($ch, CURLOPT_URL, $profile_req->get_normalized_http_url());

    curl_setopt($ch, CURLOPT_POSTFIELDS, $profile_req->to_postdata());
    $output = curl_exec($ch);
    curl_close($ch);

    //flush();
    return $output;
  }
}

/**
 * The class contains functions those will be used to connect with FriendFeed
 */
class PostiteverywhereApiFriendFeed {
  public $sig_method;
  public $consumer;
  public $request_tok;
  public $callback;
  public $domain;
  public $host;
  /**
   * Consturctor
   * @param $key - The public key of the API
   * @param $secret - The private key of the application
   *
   * @author Qasim Zeeshan
   */
  function __construct($key, $secret) {
    $this->domain = "https://friendfeed.com/account/oauth";
    $this->sig_method = new OAuthSignatureMethod_HMAC_SHA1();
    $this->callback = 'http://' . $_SERVER['HTTP_HOST'] . '/postiteverywhere/friendfeed/added';
    $this->consumer = new OAuthConsumer($key, $secret, NULL);
    $this->sig_method = new OAuthSignatureMethod_HMAC_SHA1();
    $this->request_tok = OAuthRequest::from_consumer_and_token($this->consumer, NULL, "POST", $this->domain . "/request_token");
    $this->host = 'http://friendfeed-api.com/v2';
  }
  /**
   * Get Authorization Tokens those are used to create Authorization URLs
   *
   * @return returns the Authorization Tokens
   * @author Qasim Zeeshan
   */
  function getAuthorizationTokens() {
    //Set URL where we will read Authorization Tokens after Authorization
    $this->request_tok->set_parameter("oauth_callback", $this->callback);
    $this->request_tok->sign_request($this->sig_method, $this->consumer, NULL);

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_POSTFIELDS, '');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array(
      $this->request_tok->to_header()
    ));
    curl_setopt($ch, CURLOPT_URL, $this->domain . "/request_token");
    curl_setopt($ch, CURLOPT_POST, 1);
    $output = curl_exec($ch);
    curl_close($ch);
    parse_str($output, $oauth);

    return $oauth;
  }
  /**
   * Get access token of the user that will be used by the application for communication with FriendFeed
   *
   * @param $token: oauth_token found in the callback URL
   * @param $tokensecret: the secret token that was found in $oauth from getAuthorizationTokens() function
   * @param $verifier: oauth_verifier found in the call back URL
   *
   * @return returns array of access tokens
   * @author Qasim Zeeshan
   */
  function getAccessToken($token, $tokensecret, $verifier) {
    $req_token = new OAuthConsumer($token, $tokensecret, 1);
    $acc_req = OAuthRequest::from_consumer_and_token($this->consumer, $req_token, "POST", $this->domain . '/access_token');
    $acc_req->set_parameter("oauth_verifier", $verifier);  # need the verifier too!
    $acc_req->sign_request($this->sig_method, $this->consumer, $req_token);

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_POSTFIELDS, ''); //New Line
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array( $acc_req->to_header() ));
    curl_setopt($ch, CURLOPT_URL, $this->domain . "/access_token");
    curl_setopt($ch, CURLOPT_POST, 1);
    $output = curl_exec($ch);
    curl_close($ch);
    parse_str($output, $oauth);
    return $oauth;
  }

  /**
   * Post status messsage to FriendFeed, The method is POST that is a custom message required by FriendFeed API
   *
   * @param $token: Public token of user
   * @param $secret: Secret token of user
   * @param $msg: Message that is to be sent
   * @param $link: Link that is to be sent
   * @param $username: username or feed id
   *
   * @return The output returned by the passed URL
   * @author Qasim Zeeshan
   */
  function setStatus($token, $secret, $msg, $link = NULL) {
    $args = array();
    $args['body'] = $msg;
    if ($link != NULL)
      $args['link'] = $link;

    $url = $this->host . "/entry";
    $method = 'POST';

    $req_token = new OAuthConsumer( $token, $secret, 1 );
    $profile_req = OAuthRequest::from_consumer_and_token($this->consumer, $req_token, $method, $url, $args);
    $profile_req->sign_request($this->sig_method, $this->consumer, $req_token);
    $args = array_merge($args, $profile_req->get_parameters());

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_POST, count($args));
    $data_string = OAuthUtil::build_http_query($args);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $data_string);
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);

    $output = curl_exec($ch);

    curl_close($ch);
    //flush();
    return $output;
  }
}
/**
 * @} End of "defgroup connectapi".
 */

/**
 * @defgroup postiteverywhere PostItEverywhere module functionality
 * @{
 * Module specific code
 */

/**
 * Implementation of hook_perm().
 */
function postiteverywhere_perm() {
  return array('administer postiteverywhere', 'use postiteverywhere');
}

/**
 * Implementation of hook_init().
 */
function postiteverywhere_init() {
    postiteverywhere_fb_render_js();
}

/**
 * Function adds javascript to add facebook Connect widget
 */
function postiteverywhere_fb_render_js() {
  global $base_url;
  $module_path = drupal_get_path('module', 'postiteverywhere');

  $param = postiteverywhere_get_apikeys('facebook');  //Get API keys
  if ($param) {
    drupal_add_js(drupal_get_path('module', 'postiteverywhere') .'/postiteverywhere.js', 'module');
    $xd_path = drupal_to_js(base_path() . $module_path . '/xd_receiver.html');     //This html file is recommended by facebook for performance
    drupal_add_js('facebookRequireFeatures("'. $param['api_key'] . '", ' . $xd_path . ');', 'inline', 'footer'); //the function is called from postiteverywhere.js

    //On logout from site, logout from facebook as well
    if (postiteverywhere_get_fbuid() && $_GET['fblogout']) {
      drupal_add_js('facebookLogout(' . drupal_to_js($base_url) . ');', 'inline', 'footer');  //the function is called from postiteverywhere.js
    }
  }
}

/**
 * Implementation of hook_menu().
 */
function postiteverywhere_menu() {
  $items = array();
  $items['admin/settings/postiteverywhere'] = array(
    'title' => 'Post it everywhere',
    'description' => 'Post it everywhere module settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('postiteverywhere_admin_settings'),
    'access arguments' => array('administer postiteverywhere'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['postiteverywhere'] = array(
    'title' => 'Networks',
    'page callback' => 'postiteverywhere_add_networks',
    'description' => 'Add networks those you want to connect with this site',
		'access arguments' => array('use postiteverywhere'),
    'type' => MENU_CALLBACK,
  );
  $items['postiteverywhere/facebook'] = array(
    'title' => 'Facebook',
    'page callback' => 'postiteverywhere_add_facebook',
    'description' => 'Connect facebook with this site',
		'access arguments' => array('use postiteverywhere'),
    'type' => MENU_CALLBACK,
  );
  $items['postiteverywhere/twitter'] = array(
    'title' => 'Twitter',
    'page callback' => 'postiteverywhere_add_twitter',
    'description' => t('Connect twitter with this site'),
		'access arguments' => array('use postiteverywhere'),
    'type' => MENU_CALLBACK,
  );
  $items['postiteverywhere/linkedin'] = array(
    'title' => 'Linkedin',
    'page callback' => 'postiteverywhere_add_linkedin',
    'description' => 'Connect linkedin with this site',
		'access arguments' => array('use postiteverywhere'),
    'type' => MENU_CALLBACK,
  );
  $items['postiteverywhere/friendfeed'] = array(
    'title' => 'Friendfeed',
    'page callback' => 'postiteverywhere_add_friendfeed',
    'description' => 'Connect friendfeed with this site',
		'access arguments' => array('use postiteverywhere'),
    'type' => MENU_CALLBACK,
  );
  $items['postiteverywhere/facebook/added'] = array(
    'title' => 'Facebook added',
    'page callback' => 'postiteverywhere_added_facebook',
		'access arguments' => array('use postiteverywhere'),
    'type' => MENU_CALLBACK,
  );
  $items['postiteverywhere/twitter/added'] = array(
    'title' => 'Twitter added',
    'page callback' => 'postiteverywhere_added_twitter',
		'access arguments' => array('use postiteverywhere'),
    'type' => MENU_CALLBACK,
  );

  $items['postiteverywhere/linkedin/added'] = array(
    'title' => 'Linkedin added',
    'page callback' => 'postiteverywhere_added_linkedin',
		'access arguments' => array('use postiteverywhere'),
    'type' => MENU_CALLBACK,
  );
  $items['postiteverywhere/friendfeed/added'] = array(
    'title' => 'Friendfeed added',
    'page callback' => 'postiteverywhere_added_friendfeed',
		'access arguments' => array('use postiteverywhere'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * The function is being used to display the page of Add Networks
 */
function postiteverywhere_add_networks() {
  global $base_url;
  global $user;
  $output = '';
  $output .= '<br/><div>';
  $added_networks = array();

  $remove_form = drupal_get_form('postiteverywhere_added_form');
  $added_networks = $_SESSION['postiteverywhere_added_networks'];

  if (count($added_networks) > 0) {
    $output .= '<p><b>Added networks</b></p>';
    $output .= $remove_form;
  }

  $result = db_query('SELECT id, name, image, urlalias FROM {postiteverywhere_networks}');

  //Increment, until we find some network that is not added by the user
  while (($obj = db_fetch_object($result)) && in_array($obj->id, $added_networks, FALSE));

  //Prepare the list of social networks those are not yet added
  if ($obj) {
    $output .= '<p><b>' . t('Available networks') . '</b></p>';
    do {
      if (!in_array($obj->id, $added_networks, FALSE)) {
        $comm_url = $base_url . '/postiteverywhere/' . check_plain($obj->urlalias);
        $output .= '<div><img src = "' . $base_url .  '/' . drupal_get_path('module', 'postiteverywhere') .'/images/'. check_plain($obj->image) . '"/> '
                . '<a href = ' . $comm_url . ' title = "' . t('Add ') . check_plain($obj->name) . ' settings">'
                . t('Add ') . check_plain($obj->name) . '</a></div>';
      }
    }while ($obj = db_fetch_object($result));
  }

  $output .= '</div>';
  return $output;
}

/**
 * The function creates form for all the networks those are added
 */
function postiteverywhere_added_form() {
  global $user;
  global $base_url;
  $form = array();
  $added_networks = array();

  $result = db_query('SELECT a.id, a.name, a.image FROM {postiteverywhere_networks} a, {postiteverywhere_usernetwork} b
                      WHERE a.id = b.networkid AND b.uid = %d', $user->uid);
  if ($obj = db_fetch_object($result)) {
    do {
      $form['checkboxes'][$obj->id] = array(
          '#type' => 'checkbox',
          '#default_value' => 0,
          '#title' => '<img src = "' . $base_url .  '/' . drupal_get_path('module', 'postiteverywhere') .'/images/'. check_plain($obj->image) .'"/> ' . $obj->name,
        );
        $added_networks[] = $obj->id;

    }while ($obj = db_fetch_object($result));
    $form['submit'] = array(
                      '#type' => 'submit',
                      '#value' => t('Remove'),
                      );
    $form['#submit'][] = 'postiteverywhere_remove_networks';
  }

  //Save information of networks user have already added
  $_SESSION['postiteverywhere_added_networks'] = $added_networks;
  return $form;
}

/**
 * Function to remove the information of specific networks related to a user
 */
function postiteverywhere_remove_networks($form, &$form_state) {
  global $user;
  $arr_id = array();
  $flag = FALSE;
  foreach ($form['checkboxes'] as $id => $arr) {
    if ($form['checkboxes'][$id]['#value'] == 1) {
      $arr_id[] = $id;
      $flag = TRUE;
    }
  }
  //If not network is added by the user
  if (!$flag) {
    drupal_set_message(t('Postiteverywhere : Please select a network to remove'), 'error');
    return;
  }
  //Refresh value of session
  $_SESSION['postiteverywhere_added_networks'] = array();
  $str_ids = implode(',', $arr_id);
  db_query('DELETE FROM {postiteverywhere_usernetwork} WHERE networkid IN (' . $str_ids . ') AND uid = %d', $user->uid);
}

/**
 * Implementation of hook_nodeapi().
 */
function postiteverywhere_nodeapi(&$node, $op) {
  switch ($op) {
  case 'alter':
    $postit = $_GET['postiteverywhere'];
    $nid = $_GET['nid'];
    if ($postit && $nid == $node->nid) {
      postiteverywhere_update_networks($node);
    }
    break;
  }
}

/**
 * The function will post messages on all Social networks
 *
 * @param $node: The node that is being altered
 */
function postiteverywhere_update_networks(&$node) {
  global $user;
  $arr_res = array();
  $str_networks = '';
  $prepend_msg = variable_get('postiteverywhere_title_prepend', 'I am reading : ');

  if (!$user)
    return;
    
  global $base_url;
  $node_url = $base_url . '/node/' . $node->nid;
  if(variable_get('postiteverywhere_urlalias', 0) == 1) {
    $node_url = url($node_url);
  }
  
  $msg = $prepend_msg . ' ' . $node->title . ' - ' . $node_url;
  $conf_message = '"@title"';
  
  $arr_res['Facebook'] = postiteverywhere_facebook_set_status($msg);     //Update facebook
  $arr_res['Twitter'] = postiteverywhere_twitter_set_status($msg);      //Update Twitter
  $arr_res['FriendFeed'] = postiteverywhere_friendfeed_set_status($msg);   //Update Friendfeed
  $arr_res['LinkedIn'] = postiteverywhere_linkedin_set_status($msg);     //Update LinkedIn
  
  foreach ($arr_res as $key => $res) {
    if ($res == 1) {
      $str_networks .= 'Postiteverywhere : "@title" is successfully posted to ' . $key . '<br /> ';
    }
    else if ($res == POSTITEVERYWHERE_INCORRECT_USERINFO) {
      $str_networks .= 'Authentication information regarding ' . $key . ' is either corrupted or expired, please re-authenticate<br /> ';
    }
  }
  if (strlen($str_networks) == 0) {
    $str_networks = 'Postiteverywhere : "@title" cannot be posted. Click on Settings icon to add social networks to your account.';
  }
  drupal_set_message(t('' . $str_networks, array('@title' => $node->title)));
}

/**
 * Function used to fetch the information that is used to connect to a user
 *
 * @param $network: The name of the network
 * @param $uid: The user id
 */
function postiteverywhere_getusernetworkinfo($network, $uid) {
  $result = db_query("SELECT usernetworkid FROM {postiteverywhere_usernetwork} a, {postiteverywhere_networks} b
                      WHERE a.networkid = b.id AND b.name = '%s' AND a.uid = %d", $network , $uid);
  $obj = db_fetch_object($result);
  return $obj->usernetworkid;
}

/**
 * Post to Facebook
 *
 * @param $msg: The message in string form that is to be posted
 */
function postiteverywhere_facebook_set_status($msg) {
  global $user;
  $user_fb_id = postiteverywhere_getusernetworkinfo('facebook', $user->uid);
  if ($user_fb_id) {
    try {
      postiteverywhere_facebook_client()->api_client->users_setStatus($msg, $user_fb_id);
      return 1;
    }
    catch (Exception $ex) {
      watchdog('user', t('Error while posting to facebook'), array(), WATCHDOG_INFO);
      //return POSTITEVERYWHERE_INCORRECT_USERINFO;
    }
  }
  else {
    return POSTITEVERYWHERE_MISSED_USERINFO;
  }
  return 1;
}

/**
 * Post status to twitter
 *
 * @param $msg: The message in string form that is to be posted
 */
function postiteverywhere_twitter_set_status($msg) {
  global $user;
  $tw_auth_toks = NULL;
  $api_keys = postiteverywhere_get_apikeys('twitter');
  $twitter_obj = new PostiteverywhereApiTwitter($api_keys['api_key'], $api_keys['api_secret']);
  $user_network_info = postiteverywhere_getusernetworkinfo('twitter', $user->uid);

  if ($user_network_info)
    $tw_auth_toks = split(POSTITEVERYWHERE_ID_SPLITTER, $user_network_info);
  else
    return POSTITEVERYWHERE_MISSED_USERINFO;

  $ret_obj = $twitter_obj->setStatus($tw_auth_toks[0], $tw_auth_toks[1], $msg);
  $ret_xml = simplexml_load_string($ret_obj);
  if(strlen($ret_xml -> error) > 0) {
    return POSTITEVERYWHERE_INCORRECT_USERINFO;
  }
  return 1;
}

/**
 * Post status to LinkedIn
 *
 * @param $msg: The message in string form that is to be posted
 */
function postiteverywhere_linkedin_set_status($msg) {
  global $user;
  $linkedin_keys = postiteverywhere_get_apikeys('linkedin');
  $obj_linkedin = new PostiteverywhereApiLinkedIn($linkedin_keys['api_key'], $linkedin_keys['api_secret']);
  $user_network_info = postiteverywhere_getusernetworkinfo('LinkedIn', $user->uid);

  if ($user_network_info)
    $li_auth_toks = split(POSTITEVERYWHERE_ID_SPLITTER, $user_network_info);
  else
    return POSTITEVERYWHERE_MISSED_USERINFO;
  $ret_obj = $obj_linkedin->setStatus($li_auth_toks[0], $li_auth_toks[1], $msg);
  $ret_xml = simplexml_load_string($ret_obj);
  if($ret_xml -> error == 'Incorrect signature') {
    return POSTITEVERYWHERE_INCORRECT_USERINFO;
  }
  return 1;
}

/**
 * Post status to Friendfeed
 *
 * @param $msg: The message in string form that is to be posted
 */
function postiteverywhere_friendfeed_set_status($msg) {
  global $user;
  $user_network_info = postiteverywhere_getusernetworkinfo('friendfeed', $user->uid);
  $ff_keys = postiteverywhere_get_apikeys('friendfeed');

  if ($user_network_info)
    $ff_auth_toks = split(POSTITEVERYWHERE_ID_SPLITTER, $user_network_info);
  else
    return POSTITEVERYWHERE_MISSED_USERINFO;

  if (!$ff_auth_toks)
    return POSTITEVERYWHERE_MISSED_USERINFO;
  $obj_ff = new PostiteverywhereApiFriendFeed($ff_keys['api_key'], $ff_keys['api_secret']);
  $ret_obj = $obj_ff->setStatus($ff_auth_toks[0], $ff_auth_toks[1], $msg);
  $ret_json = json_decode($ret_obj);
  
  if(strlen($ret_json -> errorCode) > 0) {
    return POSTITEVERYWHERE_INCORRECT_USERINFO;
  }
  return 1;
}

/**
 * Form that contains link to connect to facebook
 */
function postiteverywhere_add_facebook() {
  return postiteverywhere_facebook_link();
}

/**
 * Form that contains the button to connect to Twitter
 */
function postiteverywhere_add_twitter() {
  return postiteverywhere_twitter_link();
}

/**
 * Form that contains the button to connect to Twitter
 */
function postiteverywhere_add_linkedin() {
  return postiteverywhere_linkedin_link();
}

/**
 * Form that contains the button to connect to Twitter
 */
function postiteverywhere_add_friendfeed() {
  return postiteverywhere_friendfeed_link();
}

/**
 * DB function that will be used to save the network information of a user
 */
function postiteverywhere_save_networkinfo($uid, $network, $usernetworkid) {
  $result = db_query("SELECT id FROM {postiteverywhere_networks} a WHERE a.name = '%s'", $network);
  $obj = db_fetch_object($result);
  if ($obj->id)
    db_query("INSERT INTO {postiteverywhere_usernetwork} (uid, networkid, usernetworkid) VALUES (%d, %d, '%s')", $uid, $obj->id, $usernetworkid);
}
/**
 * The function is used to save the authentication information from Facebook
 */
function postiteverywhere_added_facebook() {
  global $user;
  postiteverywhere_save_networkinfo($user->uid, 'Facebook', postiteverywhere_get_fbuid());
  drupal_goto('postiteverywhere');
}
/**
 * The function is used to save the authentication information from LinkedIn
 */
function postiteverywhere_added_linkedin() {
  global $user;
  $app_keys = postiteverywhere_get_apikeys('linkedin');
  $linkedIn_obj = new PostiteverywhereApiLinkedIn($app_keys['api_key'], $app_keys['api_secret']);
  $tokensecret = $_SESSION['postiteverywhere_oauth_li_token_secret'];
  $toks = $linkedIn_obj->getAccessToken($_REQUEST['oauth_token'], $tokensecret, $_REQUEST['oauth_verifier']);
  postiteverywhere_save_networkinfo($user->uid, 'LinkedIn', $toks['oauth_token'] . POSTITEVERYWHERE_ID_SPLITTER . $toks['oauth_token_secret']);
  drupal_goto('postiteverywhere');
}
/**
 * The function is used to save the authentication information from twitter
 */
function postiteverywhere_added_twitter() {
  global $user;

  $api_keys = postiteverywhere_get_apikeys('twitter');
  $twitter_obj = new PostiteverywhereApiTwitter($api_keys['api_key'], $api_keys['api_secret']);
  $tokensecret = $_SESSION['postiteverywhere_oauth_tw_token_secret'];
  $toks = $twitter_obj->getAccessToken($_REQUEST['oauth_token'], $tokensecret, $_REQUEST['oauth_verifier']);
  postiteverywhere_save_networkinfo($user->uid, 'Twitter', $toks['oauth_token'] . POSTITEVERYWHERE_ID_SPLITTER . $toks['oauth_token_secret']);
  drupal_goto('postiteverywhere');
}

/**
 * The function is used to save the authentication information from FriendFeed
 */
function postiteverywhere_added_friendfeed() {
  global $user;
  $app_keys = postiteverywhere_get_apikeys('friendfeed');
  $friendfeed_obj = new PostiteverywhereApiFriendFeed($app_keys['api_key'], $app_keys['api_secret']);
  $tokensecret = $_SESSION['postiteverywhere_oauth_ff_token_secret'];
  $toks = $friendfeed_obj->getAccessToken($_REQUEST['oauth_token'], $tokensecret, $_REQUEST['oauth_verifier']);
  postiteverywhere_save_networkinfo($user->uid, 'FriendFeed', $toks['oauth_token'] . POSTITEVERYWHERE_ID_SPLITTER . $toks['oauth_token_secret']);
  drupal_goto('postiteverywhere');
}

/**
 * Admin settings form
 */
function postiteverywhere_admin_settings() {
  $form['postiteverywhere_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Settings'),
    '#description' => t('General settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );

  $form['postiteverywhere_settings']['postiteverywhere_title_prepend'] = array(
    '#type' => 'textfield',
    '#title' => t('Text to prepend to node title'),
    '#description' => t('This text will appear before every node\'s link on these social networks'),
    '#default_value' => variable_get('postiteverywhere_title_prepend', 'Currently reading this:'),
    '#required' => TRUE
  );
  
  $form['postiteverywhere_settings']['postiteverywhere_node_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Node types'),
    '#default_value' => variable_get('postiteverywhere_node_types', array()),
    '#options' => node_get_types('names')
  );

  $form['postiteverywhere_settings']['postiteverywhere_urlalias'] = array(
    '#type' => 'radios',
    '#title' => t('Url type'),
    '#description' => t('Select url type that you want to be posted'),
    '#default_value' => variable_get('postiteverywhere_urlalias', 0),
    '#options' => array('Raw url', 'URL alias')
  );

  $form['postiteverywhere_fbsettings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Facebook settings'),
    '#description' => t('The facebook component uses facebook connect to send updates to facebook. Please <a href = "http://www.facebook.com/developers/apps.php" target = "_blank">create and application</a> and enter the public and secret keys in the fields below.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );

  $form['postiteverywhere_fbsettings']['postiteverywhere_facebook_application_publickey'] = array(
    '#type' => 'textfield',
    '#title' => t('Facebook application public key'),
    '#description' => t('In this field, you have to enter the public key of your application.'),
    '#default_value' => variable_get('postiteverywhere_facebook_application_publickey', ''),
  );
  $form['postiteverywhere_fbsettings']['postiteverywhere_facebook_application_privatekey'] = array(
    '#type' => 'textfield',
    '#title' => t('Facebook application secret key'),
    '#description' => t('In this field, you have to enter the Secret key of your application.'),
    '#default_value' => variable_get('postiteverywhere_facebook_application_privatekey', ''),
  );

  $form['postiteverywhere_twsettings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Twitter settings'),
    '#description' => t('The twitter component uses <em>oauth</em> to send updates to Twitter. Please <a href = "https://twitter.com/apps" target = "_blank">register</a> a new application and enter the consumer key and consumer secret in the fields below.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );

  $form['postiteverywhere_twsettings']['postiteverywhere_twitter_application_publickey'] = array(
    '#type' => 'textfield',
    '#title' => t('Twitter consumer key'),
    '#description' => t('In this field, you have to enter the consumer key of your application.'),
    '#default_value' => variable_get('postiteverywhere_twitter_application_publickey', ''),
  );
  $form['postiteverywhere_twsettings']['postiteverywhere_twitter_application_privatekey'] = array(
    '#type' => 'textfield',
    '#title' => t('Twitter consumer secret'),
    '#description' => t('In this field, you have to enter the consumer secret of your application.'),
    '#default_value' => variable_get('postiteverywhere_twitter_application_privatekey', ''),
  );
  $form['postiteverywhere_lisettings'] = array(
    '#type' => 'fieldset',
    '#title' => t('LinkedIn settings'),
    '#description' => t('The LinkedIn component uses <em>oauth</em> to send updates to LinkedIn. Please <a href = "https://www.linkedin.com/secure/developer?newapp=" target = "_blank">register</a> a new application and enter the consumer key and consumer secret in the fields below.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );

  $form['postiteverywhere_lisettings']['postiteverywhere_linkedin_application_publickey'] = array(
    '#type' => 'textfield',
    '#title' => t('Linkedin application key'),
    '#description' => t('In this field, you have to enter the App key of your linkedin application.'),
    '#default_value' => variable_get('postiteverywhere_linkedin_application_publickey', ''),
  );
  $form['postiteverywhere_lisettings']['postiteverywhere_linkedin_application_privatekey'] = array(
    '#type' => 'textfield',
    '#title' => t('Linkedin private key'),
    '#description' => t('In this field, you have to enter the secret key of your linkedin application.'),
    '#default_value' => variable_get('postiteverywhere_linkedin_application_privatekey', ''),
  );
  $form['postiteverywhere_ffsettings'] = array(
    '#type' => 'fieldset',
    '#title' => t('FriendFeed settings'),
    '#description' => t('The friendfeed component uses <em>oauth</em> to send updates to friendfeed. Please <a href = "http://friendfeed.com/api/register" target = "_blank">register</a> a new application and enter the consumer key and consumer secret in the fields below.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );

  $form['postiteverywhere_ffsettings']['postiteverywhere_friendfeed_application_publickey'] = array(
    '#type' => 'textfield',
    '#title' => t('FriendFeed application key'),
    '#description' => t('In this field, you have to enter the application key of your friendfeed application.'),
    '#default_value' => variable_get('postiteverywhere_friendfeed_application_publickey', ''),
  );
  $form['postiteverywhere_ffsettings']['postiteverywhere_friendfeed_application_privatekey'] = array(
    '#type' => 'textfield',
    '#title' => t('FriendFeed private key'),
    '#description' => t('In this field, you have to enter the secret key of your friendfeed application.'),
    '#default_value' => variable_get('postiteverywhere_friendfeed_application_privatekey', ''),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_link().
 */
function postiteverywhere_link($type, $node = NULL, $teaser = FALSE) {
  global $base_url;
  global $user;

  $current_url = $_GET['q'];
  //Check if the the link should be displayed with this node or not
  if (!postiteverywhere_link_show($node->type, $node->nid) || !user_access('use postiteverywhere') || !$user->uid)
    return;

	$links['postiteverywhere_link'] = array(
	  'title' => 'Post it Everywhere!',
	  'href' => $current_url,
	  'query' => 'postiteverywhere=1&nid=' . $node->nid,
	  'attributes' => array(
		'id' => 'postiteverywhere_' . $node->nid,
		'title' => t('Share this on Facebook, Twitter and Friendfeed using just one click')
	  ),
	);
	$links['postiteverywhere_settings_link'] = array(
	  'title' => '<img src = "' . $base_url . '/' . drupal_get_path('module', 'postiteverywhere') . '/settings.gif">',
	  'href' => 'postiteverywhere',
	  'html' => TRUE,
	  'attributes' => array(
		'id' => 'postiteverywhere_addnetworks_' . $node->uid,
		'title' => t('Add/Remove networks from PostItEveryWhere'),
		'target' => '_blank',
	  ),

	);
	return $links;


}
/**
 * Facebook link
 */
function postiteverywhere_facebook_link() {
  return t('To share stories on your Facebook Profile: ') . '<a href="#" onclick="publishStreamPersonal(); return false;">'
        . postiteverywhere_fb_button() . '</a><br />'
        . t('We do not save your Facebook ID or password');
}

/*
 * Function to render facebook button
 */
function postiteverywhere_fb_button($size = 'medium', $length = 'short') {
  return '<fb:login-button size="'. $size . '" background="dark" length="' . $length . '">
          </fb:login-button>';
}
/**
 * Twitter Link
 */
function postiteverywhere_twitter_link() {
  global $base_url;
  $api_keys = postiteverywhere_get_apikeys('twitter');
  $tw_obj = new PostiteverywhereApiTwitter($api_keys['api_key'], $api_keys['api_secret']);
  $oauth = $tw_obj->getAuthorizationTokens();

  $_SESSION['postiteverywhere_oauth_tw_token_secret'] = $oauth['oauth_token_secret'];
  $url = $tw_obj->domain . '/authorize?oauth_token=' . $oauth['oauth_token'];

  return t('To share stories on twitter: ') . '<a href="' . $url  . '"><img src="'. $base_url . '/' . drupal_get_path('module', 'postiteverywhere') .'/images/twitter_signin.png" /></a><br />'
       . t('We do not save your Twitter ID or password');
}


/**
 * LinkedIn Link
 */
function postiteverywhere_linkedin_link() {
  $app_keys = postiteverywhere_get_apikeys('linkedin');

  $linkedIn_obj = new PostiteverywhereApiLinkedIn($app_keys['api_key'], $app_keys['api_secret']);
  $oauth = $linkedIn_obj->getAuthorizationTokens();

  $_SESSION['postiteverywhere_oauth_li_token_secret'] = $oauth['oauth_token_secret'];

  $url = $linkedIn_obj->domain . '/authorize?oauth_token=' . $oauth['oauth_token'];
  return t('To share stories on LinkedIn: ') . '<a href="' . $url . '">' . t('Connect with LinkedIn') . '</a><br />'
       . t('We do not save your LinkedIn ID or password');
}

/**
 * FriendFeed Link
 */
function postiteverywhere_friendfeed_link() {
  global $base_url;
  $app_keys = postiteverywhere_get_apikeys('friendfeed');
  $ff_obj = new PostiteverywhereApiFriendFeed($app_keys['api_key'], $app_keys['api_secret']);
  $oauth = $ff_obj->getAuthorizationTokens();
  $_SESSION['postiteverywhere_oauth_ff_token_secret'] = $oauth['oauth_token_secret'];
  $url = $ff_obj->domain . '/authorize?oauth_token=' . $oauth['oauth_token'];
  return t('To share stories on FriendFeed: ') . '<a href="' . $url  . '"><img src="'. $base_url . '/' . drupal_get_path('module', 'postiteverywhere') . '/images/friendfeed_signin.png" /></a><br />'
       . t(' We do not save your FriendFeed ID or password');
}

/**
 * Facebook's client object
 */
function postiteverywhere_facebook_client() {
  static $fb = NULL;
  if (!$fb instanceof Facebook) {
    if ($conf = postiteverywhere_get_apikeys('facebook')) {
      $lib_path = drupal_get_path('module', 'postiteverywhere') .'/facebook-client/';
      $lib_files = array(
        'facebook.php',
        'jsonwrapper/jsonwrapper_inner.php',
        'jsonwrapper/jsonwrapper.php',
        'jsonwrapper/JSON/JSON.php'
      );

      foreach ($lib_files as $file) {
        $file = $lib_path . $file;
        if (!file_exists($file)) {
          drupal_set_message(t('Postiteverywhere : Facebook PHP library file @file not found see README.TXT', array('@file' => $file)), 'status', FALSE);
          return FALSE;
        }
      }
      // Include facebook.php
      include_once($lib_path . $lib_files[0]);
      if (class_exists('Facebook')) {
        $fb = new Facebook($conf['api_key'], $conf['api_secret']);
      }
    }
  }
  return $fb;
}

/**
 * Implementation of hook_footer().
 */
function postiteverywhere_footer() {
  //Add facebook js
  $url = 'http://static.ak.connect.facebook.com/js/api_lib/v0.4/FeatureLoader.js.php';
  $footer = '<script type="text/javascript" src="'. $url .'"></script>';

  return $footer;
}

/**
 * Implementation of hook_user().
 */
function postiteverywhere_user($op, &$edit, &$user, $category = NULL) {
  switch ($op) {
    //Logout from facebook, Good for security but it will not affect future communication
    case 'logout':
      if (postiteverywhere_get_fbuid()) {
        drupal_goto(NULL, 'fblogout=1');
      }
      break;
    case 'delete':
      //Delete user's information
      db_query('DELETE FROM {postiteverywhere_usernetwork} WHERE uid = %d', $user->uid);
      break;
  }
}

/**
 * The function will return the user ID of the current user
 */
function postiteverywhere_get_fbuid() {
  if (postiteverywhere_facebook_client())
    return postiteverywhere_facebook_client()->get_loggedin_user();
}

/**
 * Check if the link 'PostItEveryWhere' should be displayed with the node or not
 */
function postiteverywhere_link_show($type, $nid) {
  $node_type = in_array($type, variable_get('postiteverywhere_node_types', array()), TRUE);
  return ($node_type)? TRUE : FALSE;
}

/**
 * Get API keys for different applications
 */
function postiteverywhere_get_apikeys($network) {
  $keys = array();
  $keys['api_key'] = variable_get('postiteverywhere_' . $network . '_application_publickey', '');
  $keys['api_secret'] = variable_get('postiteverywhere_' . $network . '_application_privatekey', '');
  return $keys;
}

/**
 * @} End of "defgroup postiteverywhere".
 */